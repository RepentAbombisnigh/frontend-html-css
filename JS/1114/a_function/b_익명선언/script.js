//! 익명 함수와 선언적 함수의 차이

// 반복문 차이점: 상황에 비해 다름
  // for 반복문: 횟수를 중심으로 또는 배열 등을 중심으로 반복할 때 사용
  // while 반복문: 조건을 중심으로 반복할 때 사용

//! 1. 익명 함수 사용
//: 순차적인 코드 실행에서 코드가 해당 줄을 읽을 때 생성

// 변수 선언
let anonymous;

anonymous = function() {
  console.log('1번째 익명함수입니다.');
}
anonymous = function() {
  console.log('2번째 익명함수입니다.');
}

// 익명함수 호출
anonymous(); // 두 번째만 호출

//! 2. 선언적 함수 사용
//: 순차적인 코드 실행이 일어나기 전에 생성, 같은 블록이면 어디에서든 호출 가능(hoisting)

// 선언적 함수 호출
common(); // 이 역시 두 번째만 호출
// 선언적 함수 생성
function common() {
  console.log('1번째 선언적 함수입니다.');
}
function common() {
  console.log('2번째 선언적 함수입니다.');
}

//! 3. 선언적 함수와 익명 함수의 조합
// 선언적 함수가 먼저 생성, 이후에 순차적인 코드를 진행하면서 익명 함수를 생성

// 익명 함수 생성
//: 코드 작성 순서대로 실행되기 때문에 선언적 함수보다 안정성 뛰어남
example = function() {
  console.log('익명함수');
}
//선언적 함수 생성 후 할당
function example() {
  console.log('선언적함수');
}
// 'example' 함수 호출
example(); // 익명 함수 호출됌 (읽는 순서대로가 아닌 선언적함수는 시스템상 익명 함수보다 위로 올라가기 때문에 익명함수가 아래로 내려와 익명함수로 나옴)